<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Xylara</title>
    <script src="https://track.hyghj.eu.org/api/script.js" data-site-id="8b65ec526edf" defer></script>
    <link rel="prefetch" href="/scram/scramjet.all.js" />
    <script src="/scram/scramjet.all.js"></script>
    <script src="/baremux"></script>
    <script src="/epoxy"></script>
    <link rel="icon" type="image/png" src="/assets/favicon.png">
    <script src="/uv/uv.bundle.js"></script>
    <script src="/uv/uv.config.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-family: Arial, sans-serif;
        }
        h1 {
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .search-container {
            display: flex;
            align-items: center;
            margin-top: 20px;
        }
        .search-input {
            border: none;
            border-radius: 25px;
            padding: 10px 20px;
            width: 400px;
            font-size: 16px;
            outline: none;
            background-color: rgba(255, 255, 255, 0.8);
            color: #333;
        }
        .search-input::placeholder {
            color: #666;
        }
        .search-button {
            background-color: rgba(0, 0, 0, 0.7);
            border: none;
            border-radius: 25px;
            padding: 10px 15px;
            margin-left: 4px;
            cursor: pointer;
            outline: none;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
        }
        .search-button:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const defaultBg = '/assets/backgrounds/foggy-forest.png';
            let bg = localStorage.getItem('bg');
            if (!bg) {
                bg = defaultBg;
                localStorage.setItem('bg', bg);
            }
            document.body.style.backgroundImage = `url('${bg}')`;
        });
    </script>
    <script>
        async function uvEncode(url) {
            const encodedUrl = __uv$config.prefix + __uv$config.encodeUrl(url);
            localStorage.setItem("url", encodedUrl);
            window.location.href = "/search";
        }

        async function sjEncode(url) {
            const encodedUrl = "/scram/service/" + encodeURIComponent(url);
            localStorage.setItem("url", encodedUrl);
            window.location.href = "/search";
        }

        async function init() {
            try {
                const connection = new BareMux.BareMuxConnection("/baremux/worker.js");
                let wispUrl = (location.protocol === "https:" ? "wss" : "ws") + "://" + location.host + "/wisp/";
                
                if (localStorage.getItem("wisp-server-type") === "custom") {
                    const customWisp = localStorage.getItem("wisp");
                    if (customWisp) {
                        wispUrl = customWisp;
                    }
                }

                if (localStorage.getItem("transport") == "epoxy") {
                    if (await connection.getTransport() !== "/epoxy/index.mjs") {
                        await connection.setTransport("/epoxy/index.mjs", [{ wisp: wispUrl }]);
                    }
                } else {
                    if (await connection.getTransport() !== "/libcurl/index.mjs") {
                        await connection.setTransport("/libcurl/index.mjs", [{ wisp: wispUrl }]);
                    }
                }
            } catch (err) {
                console.error("BareMux initialization error:", err);
            }

            try {
                const { ScramjetController } = $scramjetLoadController();
                const scramjet = new ScramjetController({
                    prefix: "/scram/service/",
                    files: {
                        wasm: "/scram/scramjet.wasm.wasm",
                        all: "/scram/scramjet.all.js",
                        sync: "/scram/scramjet.sync.js"
                    },
                    flags: {
                        syncxhr: true
                    }
                });
                window.sj = scramjet;
                scramjet.init();
            } catch (error) {
                console.error("Scramjet initialization error:", error);
            }
        }

        if (navigator.serviceWorker) {
            navigator.serviceWorker.getRegistrations().then(registrations => {
                if (registrations.length === 0) {
                    try {
                        navigator.serviceWorker.register("sw.js").then(() => {
                            console.log("Service worker registered.");
                        });
                    } catch (err) {
                        console.error("An error occurred while registering service worker:", err);
                    }
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.querySelector('.search-input');
            const searchButton = document.querySelector('.search-button');

            const handleSearch = async () => {
                const query = searchInput.value.trim();
                if (!query) return;

                let url;
                let isLikelySearch = false;

                try {
                    if (query.startsWith('http://') || query.startsWith('https://')) {
                        url = new URL(query);
                    } else {
                        url = new URL('https://' + query);
                    }

                    if (!url.hostname || !url.hostname.includes('.')) {
                        isLikelySearch = true;
                    }

                } catch (e) {
                    isLikelySearch = true;
                }

                if (isLikelySearch) {
                    url = new URL(localStorage.getItem('search') + query);
                }

                let proxyType = localStorage.getItem('proxy');
                if (!proxyType) {
                    proxyType = 'ultraviolet';
                    localStorage.setItem('proxy', proxyType);
                }

                if (proxyType === 'ultraviolet') {
                    await uvEncode(url.toString());
                } else if (proxyType === 'scramjet') {
                    await sjEncode(url.toString());
                }
            };

            searchButton.addEventListener('click', handleSearch);
            searchInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    handleSearch();
                }
            });

            init();
        });
    </script>
</head>
<body>
    <%- include('parts/topbar.ejs') %>
    <div class="search-container">
        <input type="text" class="search-input" placeholder="Search the web freely...">
        <button class="search-button">âžœ</button>
    </div>
</body>
</html>