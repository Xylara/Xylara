<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Xylara</title>
    <script src="https://track.hyghj.eu.org/api/script.js" data-site-id="8b65ec526edf" defer></script>
    <link rel="prefetch" href="/scram/scramjet.all.js" />
    <script src="/scram/scramjet.all.js"></script>
    <script src="/baremux"></script>
    <script src="/epoxy"></script>
    <link rel="icon" type="image/png" src="/assets/favicon.png">
    <script src="/uv/uv.bundle.js"></script>
    <script src="/uv/uv.config.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }
        h1 {
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .search-container {
            display: flex;
            align-items: center;
            margin-top: 20px;
        }
        .search-input {
            border: none;
            border-radius: 25px;
            padding: 10px 20px;
            width: 400px;
            font-size: 16px;
            outline: none;
            background-color: rgba(255, 255, 255, 0.8);
            color: #333;
        }
        .search-input::placeholder {
            color: #666;
        }
        .search-button {
            background-color: rgba(0, 0, 0, 0.7);
            border: none;
            border-radius: 25px;
            padding: 10px 15px;
            margin-left: 4px;
            cursor: pointer;
            outline: none;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
        }
        .search-button:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }
    </style>
    <style>
        .app-buttons {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .app-button {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.7);
            margin: 0 10px;
            cursor: pointer;
            outline: none;
            border: none;
            color: white;
            text-decoration: none;
        }

        .app-button:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }

        .app-button img {
            max-width: 60%;
            max-height: 60%;
        }

        #add-app-button {
            background-color: rgba(0, 0, 0, 0.7);
        }

        #add-app-button:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const defaultBg = '/assets/backgrounds/foggy-forest.png';
            let bg = localStorage.getItem('bg');
            if (!bg) {
                bg = defaultBg;
                localStorage.setItem('bg', bg);
            }
            document.body.style.backgroundImage = `url('${bg}')`;
        });

        const savedFont = localStorage.getItem('font');
        if (savedFont) {
            document.body.style.fontFamily = savedFont;
        }
    </script>
    <script>
        async function uvEncode(url) {
            const encodedUrl = __uv$config.prefix + __uv$config.encodeUrl(url);
            localStorage.setItem("url", encodedUrl);
            window.location.href = "/search";
        }

        async function sjEncode(url) {
            const encodedUrl = "/scram/service/" + encodeURIComponent(url);
            localStorage.setItem("url", encodedUrl);
            window.location.href = "/search";
        }

        async function init() {
            try {
                const connection = new BareMux.BareMuxConnection("/baremux/worker.js");
                let wispUrl = (location.protocol === "https:" ? "wss" : "ws") + "://" + location.host + "/wisp/";
                
                if (localStorage.getItem("wisp-server-type") === "custom") {
                    const customWisp = localStorage.getItem("wisp");
                    if (customWisp) {
                        wispUrl = customWisp;
                    }
                }

                if (localStorage.getItem("transport") == "epoxy") {
                    if (await connection.getTransport() !== "/epoxy/index.mjs") {
                        await connection.setTransport("/epoxy/index.mjs", [{ wisp: wispUrl }]);
                    }
                } else {
                    if (await connection.getTransport() !== "/libcurl/index.mjs") {
                        await connection.setTransport("/libcurl/index.mjs", [{ wisp: wispUrl }]);
                    }
                }
            } catch (err) {
                console.error("BareMux initialization error:", err);
            }

            try {
                const { ScramjetController } = $scramjetLoadController();
                const scramjet = new ScramjetController({
                    prefix: "/scram/service/",
                    files: {
                        wasm: "/scram/scramjet.wasm.wasm",
                        all: "/scram/scramjet.all.js",
                        sync: "/scram/scramjet.sync.js"
                    },
                    flags: {
                        syncxhr: true
                    }
                });
                window.sj = scramjet;
                scramjet.init();
            } catch (error) {
                console.error("Scramjet initialization error:", error);
            }
        }

        if (navigator.serviceWorker) {
            navigator.serviceWorker.getRegistrations().then(registrations => {
                if (registrations.length === 0) {
                    try {
                        navigator.serviceWorker.register("sw.js").then(() => {
                            console.log("Service worker registered.");
                        });
                    } catch (err) {
                        console.error("An error occurred while registering service worker:", err);
                    }
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.querySelector('.search-input');
            const searchButton = document.querySelector('.search-button');

            const handleSearch = async () => {
                const query = searchInput.value.trim();
                if (!query) return;

                let url;
                let isLikelySearch = false;

                try {
                    if (query.startsWith('http://') || query.startsWith('https://')) {
                        url = new URL(query);
                    } else {
                        url = new URL('https://' + query);
                    }

                    if (!url.hostname || !url.hostname.includes('.')) {
                        isLikelySearch = true;
                    }

                } catch (e) {
                    isLikelySearch = true;
                }

                if (isLikelySearch) {
                    url = new URL(localStorage.getItem('search') + query);
                }

                let proxyType = localStorage.getItem('proxy');
                if (!proxyType) {
                    proxyType = 'ultraviolet';
                    localStorage.setItem('proxy', proxyType);
                }

                if (proxyType === 'ultraviolet') {
                    await uvEncode(url.toString());
                } else if (proxyType === 'scramjet') {
                    await sjEncode(url.toString());
                }
            };

            searchButton.addEventListener('click', handleSearch);
            searchInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    handleSearch();
                }
            });

            init();
        });

        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.querySelector('.search-input');
            const searchButton = document.querySelector('.search-button');
            const appButtonsDiv = document.querySelector('.app-buttons');
            const addAppButton = document.getElementById('add-app-button');

            const encodeURL = async (url) => {
                let proxyType = localStorage.getItem('proxy');
                if (!proxyType) {
                    proxyType = 'ultraviolet';
                    localStorage.setItem('proxy', proxyType);
                }

                if (proxyType === 'ultraviolet') {
                    await uvEncode(url);
                } else if (proxyType === 'scramjet') {
                    await sjEncode(url);
                }
            };

            const createAppButton = (appName, appUrl) => {
                const appButton = document.createElement('a');
                appButton.href = '#';
                appButton.classList.add('app-button');
                appButton.textContent = appName;

                appButton.addEventListener('click', (event) => {
                    event.preventDefault();
                    encodeURL(appUrl);
                });

                appButton.addEventListener('contextmenu', (event) => {
                    event.preventDefault();
                    const appName = appButton.textContent;
                    const appIndex = apps.findIndex(app => app.name === appName);
                    if (appIndex > -1) {
                        apps.splice(appIndex, 1);
                        localStorage.setItem('apps', JSON.stringify(apps));
                        appButton.remove();
                    }
                });
                return appButton;
            };

            let apps = JSON.parse(localStorage.getItem('apps') || '[]');
            apps.forEach(app => {
                const appButton = createAppButton(app.name, app.url);
                appButtonsDiv.insertBefore(appButton, addAppButton);
            });

            addAppButton.addEventListener('click', () => {

            });

            const addAppModal = document.getElementById('add-app-modal');
            const addAppSubmit = document.getElementById('add-app-submit');
            const addAppCancel = document.getElementById('add-app-cancel');
            const appNameInput = document.getElementById('app-name');
            const appUrlInput = document.getElementById('app-url');

            addAppButton.addEventListener('click', () => {
                addAppModal.style.display = 'flex';
            });

            addAppCancel.addEventListener('click', () => {
                addAppModal.style.display = 'none';
            });

            addAppSubmit.addEventListener('click', () => {
                const appName = appNameInput.value;
                let appUrl = appUrlInput.value;

                if (appUrl && !appUrl.startsWith('http://') && !appUrl.startsWith('https://')) {
                    appUrl = 'https://' + appUrl;
                }

                if (appName && appUrl) {
                    apps.push({ name: appName, url: appUrl });
                    localStorage.setItem('apps', JSON.stringify(apps));

                    const appButton = createAppButton(appName, appUrl);
                    appButtonsDiv.insertBefore(appButton, addAppButton);

                    addAppModal.style.display = 'none';
                    appNameInput.value = '';
                    appUrlInput.value = '';
                }
            });

            const handleSearch = async () => {
                const query = searchInput.value.trim();
                if (!query) return;

                let url;
                let isLikelySearch = false;

                try {
                    if (query.startsWith('http://') || query.startsWith('https://')) {
                        url = new URL(query);
                    } else {
                        url = new URL('https://' + query);
                    }

                    if (!url.hostname || !url.hostname.includes('.')) {
                        isLikelySearch = true;
                    }

                } catch (e) {
                    isLikelySearch = true;
                }

                if (isLikelySearch) {
                    url = new URL(localStorage.getItem('search') + query);
                }

                encodeURL(url.toString());
            };

            searchButton.addEventListener('click', handleSearch);
            searchInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    handleSearch();
                }
            });

            init();
        });
    </script>
</head>
<body>
    <%- include('parts/topbar.ejs') %>
    <div class="container">
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Search the web freely...">
            <button class="search-button">➜</button>
        </div>
        <div class="app-buttons">
            <a href="#" class="app-button" onclick="event.preventDefault(); (async () => {
                const searchInput = document.querySelector('.search-input');
                searchInput.value = 'https://discord.com';
                const searchButton = document.querySelector('.search-button');
                searchButton.click();
            })();">
                <img src="/assets/svg/discord.svg" alt="Discord">
            </a>
            <a href="#" class="app-button" onclick="event.preventDefault(); (async () => {
                const searchInput = document.querySelector('.search-input');
                searchInput.value = 'https://play.geforcenow.com';
                const searchButton = document.querySelector('.search-button');
                searchButton.click();
            })();">
                <img src="/assets/svg/geforcenow.svg" alt="Geforcenow">
            </a>
            <a href="#" class="app-button" onclick="event.preventDefault(); (async () => {
                const searchInput = document.querySelector('.search-input');
                searchInput.value = 'https://youtube.com';
                const searchButton = document.querySelector('.search-button');
                searchButton.click();
            })();">
                <img src="/assets/svg/youtube.svg" alt="Youtube">
            </a>
            <a href="#" class="app-button" onclick="event.preventDefault(); (async () => {
                const searchInput = document.querySelector('.search-input');
                searchInput.value = 'https://spotify.com';
                const searchButton = document.querySelector('.search-button');
                searchButton.click();
            })();">
                <img src="/assets/svg/spotify.svg" alt="Spotify">
            </a>
            <a href="#" class="app-button" onclick="event.preventDefault(); (async () => {
                const searchInput = document.querySelector('.search-input');
                searchInput.value = 'https://x.com';
                const searchButton = document.querySelector('.search-button');
                searchButton.click();
            })();">
                <img src="/assets/svg/x.svg" alt="Twitter/X">
            </a>
            <a href="#" class="app-button" id="add-app-button">
                <img src="/assets/svg/plus.svg" alt="Add App">
            </a>
        </div>
        <div id="add-app-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); justify-content: center; align-items: center; backdrop-filter: blur(5px); color: white; font-family: var(--font-family);">
            <div style="background-color: rgba(0, 0, 0, 0.7); padding: 20px; border-radius: 10px; text-align: center;">
                <h2 style="margin-bottom: 4px;">Add New App</h2>
                <label for="app-name">App Name:</label><br>
                <input type="text" id="app-name" name="app-name" style="border: none; border-radius: 25px; padding: 10px 20px; width: 200px; font-size: 16px; outline: none; background-color: rgba(255, 255, 255, 0.1); color: white;"><br><br>
                <label for="app-url">App URL:</label><br>
                <input type="text" id="app-url" name="app-url" style="border: none; border-radius: 25px; padding: 10px 20px; width: 200px; font-size: 16px; outline: none; background-color: rgba(255, 255, 255, 0.1); color: white;"><br><br>
                <button id="add-app-submit" style="background-color: rgba(0, 0, 0, 0.7); border: none; border-radius: 25px; padding: 10px 15px; cursor: pointer; outline: none; color: white; font-size: 16px;">Add</button>
                <button id="add-app-cancel" style="background-color: rgba(0, 0, 0, 0.7); border: none; border-radius: 25px; padding: 10px 15px; cursor: pointer; outline: none; color: white; font-size: 16px;">Cancel</button>
            </div>
        </div>
    </div>
</html>
